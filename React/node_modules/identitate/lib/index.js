"use strict";

exports.__esModule = true;
exports.identitySecondLast = exports.identityLast = exports.identitySecond = exports.identity = exports.createIdentity = void 0;

var _pathington = require("pathington");

var _utils = require("./utils");

// external dependencies
// utils

/**
 * @function createIdentity
 *
 * @description
 * create an identity method for a specific argument index
 *
 * @param {number} argIndex the index of the argument to get
 * @param {Array<number|string>|number|string} path the nested path to retrieve the value from
 * @returns {function(...Array<*>): *} the identity method for the given argument
 */
var createIdentity = function createIdentity(argIndex, path) {
  var shouldGetNestedValue = path !== void 0;
  return function () {
    // eslint-disable-next-line prefer-rest-params
    var value = arguments[argIndex < 0 ? arguments.length + argIndex : argIndex];
    return shouldGetNestedValue ? (0, _utils.getNestedProperty)((0, _pathington.parse)(path), value) : value;
  };
};

exports.createIdentity = createIdentity;
var identity = createIdentity(0);
exports.identity = identity;
var identitySecond = createIdentity(1);
exports.identitySecond = identitySecond;
var identityLast = createIdentity(-1);
exports.identityLast = identityLast;
var identitySecondLast = createIdentity(-2);
exports.identitySecondLast = identitySecondLast;